<?xml version="1.0" encoding="utf-8"?>
<TcPlcObject Version="1.1.0.1">
  <POU Name="FB_CalculateHFromAngle" Id="{74d36053-ce73-4c0d-83ef-36d44fd8b264}" SpecialFunc="None">
    <Declaration><![CDATA[
{attribute 'no_explicit_call' := 'Do not call this POU directly'}
FUNCTION_BLOCK FB_CalculateHFromAngle IMPLEMENTS I_CalculateHFromAngle
VAR
    D_tu : LREAL;
    R_c : LREAL;
    R_a : LREAL;
END_VAR
]]></Declaration>
    <Implementation>
      <ST><![CDATA[]]></ST>
    </Implementation>
    <Method Name="CalculateH" Id="{dc7118cd-b129-4332-8eff-b51544017de8}">
      <Declaration><![CDATA[
METHOD PUBLIC CalculateH : LREAL
VAR_INPUT
    Radians : LREAL;
END_VAR
VAR_OUTPUT
    Error : BOOL;
    ErrorMsg : T_MaxString;
END_VAR
VAR
    a : LREAL;
    b : LREAL;
    c : LREAL;
    d : LREAL;
    e : LREAL;
    f : LREAL;
    g : LREAL;
    h : LREAL;
    //sqrt_operand : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
IF R_c = 0 THEN
    Error := TRUE;
    ErrorMsg := CONCAT('R_c cannot equal 0. Value: ', TO_STRING(R_c));
    RETURN;
END_IF

a := R_a * COS(Radians);
b := D_tu - a;
c := b / R_c;

IF c < -1.0 OR c > 1.0 THEN
    Error := TRUE;
    ErrorMsg := CONCAT('Invalid angle. Value: ', TO_STRING(Radians));
    RETURN;
END_IF

d := ACOS(c);
e := SIN(d);
f := SIN(Radians);
g := R_a * f;
h := R_c * e;

CalculateH := h + g;

(*
sqrt_operand := -EXPT(R_a,2) * EXPT(COS(Angle),2) + 2 * R_a * D_tu * COS(Angle) + R_c - EXPT(D_tu,2);

IF sqrt_operand < 0.0 THEN
    Error := TRUE;
    ErrorMsg := CONCAT('Invalid angle. Value: ', TO_STRING(Angle));
    RETURN;
END_IF

CalculateH := R_a * SIN(Angle) - SQRT(sqrt_operand);
*)]]></ST>
      </Implementation>
    </Method>
    <Method Name="CalculateHVelocity" Id="{89257994-1c93-484a-b82b-9d06729c69ae}">
      <Declaration><![CDATA[
METHOD CalculateHVelocity : LREAL
VAR_INPUT
    Radians : LREAL;
    RadiansPerSecond : LREAL;
END_VAR
VAR_OUTPUT
    Error : BOOL;
    ErrorMsg : T_MaxString;
END_VAR
VAR
    A : LREAL;
    b : LREAL;
    b_dot : LREAL;
    C : LREAL;
    D : LREAL;
    fNumberToSqrt : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
A := R_a;
b := Radians;
b_dot := RadiansPerSecond;
C := R_c;
D := D_tu;
fNumberToSqrt := 1 - EXPT((D - (A * COS(b))/C), 2);

IF fNumberToSqrt <= 0 THEN
    Error := TRUE;
    ErrorMsg := 'number to sqrt was 0 or less than 0.';
    RETURN;
END_IF

CalculateHVelocity := A * b_dot * (COS(b) - (SIN(b)*(D - (COS(b))/C))/(SQRT(fNumberToSqrt)));
]]></ST>
      </Implementation>
    </Method>
    <Method Name="FB_Init" Id="{444f3093-180c-431a-926e-ed544cc28fa6}">
      <Declaration><![CDATA[
METHOD FB_Init: BOOL
VAR_INPUT
    bInitRetains: BOOL; // TRUE: the retain variables are initialized (reset warm / reset cold)
    bInCopyCode: BOOL;  // TRUE: the instance will be copied to the copy code afterward (online change)

    D_tu : LREAL;
    R_c : LREAL;
    R_a : LREAL;
END_VAR
]]></Declaration>
      <Implementation>
        <ST><![CDATA[
THIS^.D_tu := D_tu;
THIS^.R_c := R_c;
THIS^.R_a := R_a;
]]></ST>
      </Implementation>
    </Method>
    <LineIds Name="FB_CalculateHFromAngle">
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CalculateHFromAngle.CalculateH">
      <LineId Id="3" Count="34" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CalculateHFromAngle.CalculateHVelocity">
      <LineId Id="3" Count="14" />
      <LineId Id="2" Count="0" />
    </LineIds>
    <LineIds Name="FB_CalculateHFromAngle.FB_Init">
      <LineId Id="3" Count="3" />
      <LineId Id="2" Count="0" />
    </LineIds>
  </POU>
</TcPlcObject>